import 'dart:core';
import 'dart:math';

import 'package:der_assistenzplaner/viewmodels/assistant_model.dart';
import 'package:der_assistenzplaner/viewmodels/availabilities_model.dart';
import 'package:der_assistenzplaner/viewmodels/shift_model.dart';
import 'package:der_assistenzplaner/data/models/shift.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

List<String> names = [
  'Anna',
  'Bernd',
  'Clara',
  'Ahmed',
  'Eva',
  'Fritz',
  'Gina',
  'Hanna',
  'Ingo',
];

List<Color> colors = [
  Colors.red,
  Colors.green,
  Colors.blue,
  Colors.orange,
  Colors.purple,
  Colors.cyan,
  Colors.amber,
  Colors.teal,
  Colors.indigo,
];

Future<void> addTestAssistants(context) async {
  final assistantModel = Provider.of<AssistantModel>(context, listen: false);
  for (int i = 1; i <= 9; i++) {
    final newAssistant = assistantModel.createAssistant(names[i - 1], 80.0);
    await assistantModel.saveAssistant(newAssistant);
    assistantModel.assignColor(newAssistant.assistantID, colors[i - 1]);
  }
}

Future<void> addCurrentMonthShifts(context) async {
  final shiftModel = Provider.of<ShiftModel>(context, listen: false);
  final now = DateTime.now();
  final int year = now.year;
  final int month = now.month;
  final int daysInMonth = DateTime(year, month + 1, 0).day;
  
  for (int day = 1; day <= daysInMonth; day++) {
    DateTime shiftStart = DateTime(year, month, day, 8, 0);
    DateTime shiftEnd = DateTime(year, month, day, 16, 0);
    Shift newShift = shiftModel.createShift(shiftStart, shiftEnd, null);
    await shiftModel.saveShift(newShift);
  }
}

/// Erstellt Verf√ºgbarkeiten assistentenweise mit 8-12 zuf√§lligen Angaben pro Assistenz
Future<void> addTestAvailabilities(context) async {
  final assistantModel = Provider.of<AssistantModel>(context, listen: false);
  final shiftModel = Provider.of<ShiftModel>(context, listen: false);
  final availabilitiesModel = Provider.of<AvailabilitiesModel>(context, listen: false);
  
  final random = Random();
  final unscheduledShifts = shiftModel.unscheduledShifts.toList();
  final assistants = assistantModel.assistants.toList();
  
  if (unscheduledShifts.isEmpty) {
    print('Keine unbesetzten Schichten gefunden f√ºr Verf√ºgbarkeiten');
    return;
  }
  
  if (assistants.isEmpty) {
    print('Keine Assistenten gefunden f√ºr Verf√ºgbarkeiten');
    return;
  }
  
  print('Starte assistentenweise Erstellung von Verf√ºgbarkeiten f√ºr ${assistants.length} Assistenten...');
  
  // F√ºr jeden Assistenten
  for (int assistantIndex = 0; assistantIndex < assistants.length; assistantIndex++) {
    final assistant = assistants[assistantIndex];
    
    // Zuf√§llige Anzahl von Verf√ºgbarkeiten f√ºr diesen Assistenten (8-12)
    final availabilityCount = random.nextInt(5) + 8; // 8-12
    
    print('üìã ${assistant.name} gibt ${availabilityCount} Verf√ºgbarkeiten ein...');
    
    // Mische die Schichten f√ºr zuf√§llige Auswahl
    final shuffledShifts = List<Shift>.from(unscheduledShifts)..shuffle();
    
    // Sammle Verf√ºgbarkeiten f√ºr diesen Assistenten
    final availabilitiesForThisAssistant = <dynamic>[];
    
    // Erstelle die gew√ºnschte Anzahl von Verf√ºgbarkeiten
    for (int i = 0; i < min(availabilityCount, shuffledShifts.length); i++) {
      final shift = shuffledShifts[i];
      
      final availability = availabilitiesModel.createAvailability(
        shift.shiftID, 
        assistant.assistantID
      );
      
      availabilitiesForThisAssistant.add(availability);
      
      // Kurze Verz√∂gerung zwischen einzelnen Eingaben (50-150ms)
      await Future.delayed(Duration(milliseconds: random.nextInt(100) + 50));
      
      // Zwischenstatus f√ºr realistische Simulation
      if ((i + 1) % 3 == 0) {
        print('   ... ${i + 1}/${availabilityCount} eingegeben');
      }
    }
    
    // Alle Verf√ºgbarkeiten f√ºr diesen Assistenten auf einmal speichern
    print('üíæ Speichere ${availabilitiesForThisAssistant.length} Verf√ºgbarkeiten f√ºr ${assistant.name}...');
    
    for (final availability in availabilitiesForThisAssistant) {
      await availabilitiesModel.saveAvailability(availability);
      
      // Sehr kurze Pause zwischen Speichervorg√§ngen (20-50ms)
      await Future.delayed(Duration(milliseconds: random.nextInt(30) + 20));
    }
    
    print('‚úÖ ${assistant.name} fertig (${availabilitiesForThisAssistant.length} Verf√ºgbarkeiten gespeichert)');
    
    // Pause zwischen Assistenten (300-800ms)
    if (assistantIndex < assistants.length - 1) {
      final pauseMs = random.nextInt(500) + 300;
      print('‚è≥ Warte ${pauseMs}ms bis zum n√§chsten Assistenten...\n');
      await Future.delayed(Duration(milliseconds: pauseMs));
    }
  }
  
  print('üéâ Alle Verf√ºgbarkeiten f√ºr ${assistants.length} Assistenten erstellt!');
}

/// Alternative Version mit l√§ngeren Wartezeiten f√ºr Demo-Zwecke
Future<void> addTestAvailabilitiesSlowDemo(context) async {
  final assistantModel = Provider.of<AssistantModel>(context, listen: false);
  final shiftModel = Provider.of<ShiftModel>(context, listen: false);
  final availabilitiesModel = Provider.of<AvailabilitiesModel>(context, listen: false);
  
  final random = Random();
  final unscheduledShifts = shiftModel.unscheduledShifts.toList();
  final assistants = assistantModel.assistants.toList();
  
  if (unscheduledShifts.isEmpty || assistants.isEmpty) {
    print('Keine Daten f√ºr Verf√ºgbarkeiten vorhanden');
    return;
  }
  
  print('üé¨ Demo: Langsame assistentenweise Erstellung von Verf√ºgbarkeiten...');
  
  for (int assistantIndex = 0; assistantIndex < assistants.length; assistantIndex++) {
    final assistant = assistants[assistantIndex];
    final availabilityCount = random.nextInt(5) + 8; // 8-12
    
    print('üìã ${assistant.name} beginnt mit der Eingabe von ${availabilityCount} Verf√ºgbarkeiten...');
    
    final shuffledShifts = List<Shift>.from(unscheduledShifts)..shuffle();
    final availabilitiesForThisAssistant = <dynamic>[];
    
    // Eingabe-Phase mit l√§ngeren Verz√∂gerungen
    for (int i = 0; i < min(availabilityCount, shuffledShifts.length); i++) {
      final shift = shuffledShifts[i];
      
      final availability = availabilitiesModel.createAvailability(
        shift.shiftID, 
        assistant.assistantID
      );
      
      availabilitiesForThisAssistant.add(availability);
      
      print('   üìù ${assistant.name}: Verf√ºgbarkeit ${i + 1}/${availabilityCount} f√ºr ${shift.start.day}.${shift.start.month}');
      
      // L√§ngere Verz√∂gerung f√ºr Demo (200-500ms)
      await Future.delayed(Duration(milliseconds: random.nextInt(300) + 200));
    }
    
    // "Absenden"-Phase
    print('üì§ ${assistant.name} sendet ${availabilitiesForThisAssistant.length} Verf√ºgbarkeiten ab...');
    await Future.delayed(Duration(milliseconds: 500)); // Kurze "Absende"-Pause
    
    // Speichern
    for (final availability in availabilitiesForThisAssistant) {
      await availabilitiesModel.saveAvailability(availability);
      await Future.delayed(Duration(milliseconds: 50));
    }
    
    print('‚úÖ ${assistant.name} fertig! (${availabilitiesForThisAssistant.length} Verf√ºgbarkeiten)');
    
    // L√§ngere Pause zwischen Assistenten f√ºr Demo (1-3 Sekunden)
    if (assistantIndex < assistants.length - 1) {
      final pauseSec = random.nextInt(2) + 1;
      print('‚è≥ N√§chster Assistent in ${pauseSec} Sekunden...\n');
      await Future.delayed(Duration(seconds: pauseSec));
    }
  }
  
  print('üéâ Demo abgeschlossen: Alle ${assistants.length} Assistenten haben ihre Verf√ºgbarkeiten eingereicht!');
}

/// Hilfsmethode: Erstellt Verf√ºgbarkeiten nur f√ºr bestimmte Assistenten (f√ºr Partial-Tests)
Future<void> addTestAvailabilitiesForSpecificAssistants(
  context, 
  List<String> assistantNames
) async {
  final assistantModel = Provider.of<AssistantModel>(context, listen: false);
  final shiftModel = Provider.of<ShiftModel>(context, listen: false);
  final availabilitiesModel = Provider.of<AvailabilitiesModel>(context, listen: false);
  
  final random = Random();
  final unscheduledShifts = shiftModel.unscheduledShifts.toList();
  
  // Filtere nur die gew√ºnschten Assistenten
  final selectedAssistants = assistantModel.assistants
      .where((assistant) => assistantNames.contains(assistant.name))
      .toList();
  
  if (selectedAssistants.isEmpty) {
    print('Keine der angegebenen Assistenten gefunden: $assistantNames');
    return;
  }
  
  print('Erstelle Verf√ºgbarkeiten nur f√ºr: ${selectedAssistants.map((a) => a.name).join(', ')}');
  
  for (final assistant in selectedAssistants) {
    final availabilityCount = random.nextInt(5) + 8;
    final shuffledShifts = List<Shift>.from(unscheduledShifts)..shuffle();
    
    print('üìã ${assistant.name}: ${availabilityCount} Verf√ºgbarkeiten...');
    
    for (int i = 0; i < min(availabilityCount, shuffledShifts.length); i++) {
      final availability = availabilitiesModel.createAvailability(
        shuffledShifts[i].shiftID, 
        assistant.assistantID
      );
      
      await availabilitiesModel.saveAvailability(availability);
      await Future.delayed(Duration(milliseconds: random.nextInt(100) + 50));
    }
    
    print('‚úÖ ${assistant.name} fertig');
    await Future.delayed(Duration(milliseconds: random.nextInt(500) + 300));
  }
}