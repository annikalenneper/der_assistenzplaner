import 'package:flutter/material.dart';

// STYLES GENERATED BY CLAUDE, TO BE UPDATED


// ----------------- Schema 1: Modern Business -----------------
class ModernBusinessTheme {
  // Basis-Farben
  static const primaryColor = Color(0xFF2C3E50);
  static const surfaceColor = Color(0xFFFFFFFF);
  static const errorColor = Color(0xFFE74C3C);

  // Mitarbeiterfarben bleiben gleich
  static const List<Color> staffColors = [
    Color(0xFF1ABC9C), // Türkis
    Color(0xFF2ECC71), // Smaragdgrün
    Color(0xFF3498DB), // Hellblau
    Color(0xFF9B59B6), // Violett
    Color(0xFFE67E22), // Orange
    Color(0xFFE74C3C), // Rot
    Color(0xFFF1C40F), // Gelb
    Color(0xFF16A085), // Dunkelgrün
    Color(0xFF2980B9), // Marineblau
    Color(0xFF8E44AD), // Lila
    Color(0xFFD35400), // Dunkelorange
    Color(0xFFC0392B), // Weinrot
    Color(0xFF7F8C8D), // Grau
    Color(0xFF27AE60), // Waldgrün
    Color(0xFF2C3E50), // Dunkelblau
  ];

  static ThemeData get themeData => ThemeData(
    useMaterial3: true,
    colorScheme: ColorScheme.fromSeed(
      seedColor: primaryColor,
      brightness: Brightness.light,
    ),
    
    tabBarTheme: TabBarTheme(
      labelColor: primaryColor,
      unselectedLabelColor: Colors.grey,
      indicator: UnderlineTabIndicator(
        borderSide: BorderSide(width: 2.0, color: primaryColor),
      ),
    ),
    
    iconTheme: IconThemeData(
      color: primaryColor,
      size: 24.0,
    ),
    
    floatingActionButtonTheme: FloatingActionButtonThemeData(
      backgroundColor: primaryColor,
      foregroundColor: surfaceColor,
    ),
    
    dropdownMenuTheme: DropdownMenuThemeData(
      textStyle: TextStyle(color: primaryColor),
      menuStyle: MenuStyle(
        backgroundColor: WidgetStateProperty.all(surfaceColor),
      ),
    ),
    
    textTheme: TextTheme(
      titleLarge: TextStyle(
        fontSize: 24.0,
        fontWeight: FontWeight.bold,
        color: primaryColor,
      ),
      bodyLarge: TextStyle(
        fontSize: 16.0,
        color: Colors.black87,
      ),
      bodyMedium: TextStyle(
        fontSize: 14.0,
        color: Colors.black54,
      ),
    ),
  );
}

// ----------------- Schema 2: Creative Studio -----------------
class CreativeStudioTheme {
  static const primaryColor = Color(0xFF6C5CE7);
  static const surfaceColor = Color(0xFFFFFFFF);
  static const errorColor = Color(0xFFFF6B6B);

  static const List<Color> staffColors = [
    Color(0xFF00CEC9), // Türkis
    Color(0xFF55EFC4), // Mintgrün
    Color(0xFF74B9FF), // Hellblau
    Color(0xFFA29BFE), // Lavendel
    Color(0xFFFFAB91), // Lachs
    Color(0xFFFF7675), // Korallenrot
    Color(0xFFFFD93D), // Gelb
    Color(0xFF00B894), // Jadegrün
    Color(0xFF0984E3), // Ozeanblau
    Color(0xFF6C5CE7), // Indigo
    Color(0xFFE17055), // Terrakotta
    Color(0xFFD63031), // Rot
    Color(0xFF636E72), // Schiefergrau
    Color(0xFF00B894), // Smaragdgrün
    Color(0xFF4834D4), // Königsblau
  ];

  static ThemeData get themeData => ThemeData(
    useMaterial3: true,
    colorScheme: ColorScheme.fromSeed(
      seedColor: primaryColor,
      brightness: Brightness.light,
    ),
    
    tabBarTheme: TabBarTheme(
      labelColor: primaryColor,
      unselectedLabelColor: Colors.grey.shade400,
      indicator: BoxTabIndicator(
        color: primaryColor,
        height: 3,
      ),
    ),
    
    iconTheme: IconThemeData(
      color: primaryColor,
      size: 24.0,
    ),
    
    floatingActionButtonTheme: FloatingActionButtonThemeData(
      backgroundColor: primaryColor,
      foregroundColor: surfaceColor,
    ),
    
    dropdownMenuTheme: DropdownMenuThemeData(
      textStyle: TextStyle(color: primaryColor),
      menuStyle: MenuStyle(
        backgroundColor: WidgetStateProperty.all(surfaceColor),
      ),
    ),
    
    textTheme: TextTheme(
      titleLarge: TextStyle(
        fontSize: 28.0,
        fontWeight: FontWeight.w600,
        color: primaryColor,
      ),
      bodyLarge: TextStyle(
        fontSize: 16.0,
        color: Colors.black87,
      ),
      bodyMedium: TextStyle(
        fontSize: 14.0,
        color: Colors.black54,
      ),
    ),
  );
}

// ----------------- Schema 3: Tech Minimal -----------------
class TechMinimalTheme {
  static const primaryColor = Color(0xFF000000);
  static const surfaceColor = Color(0xFFFFFFFF);
  static const errorColor = Color(0xFFDC3545);

  static const List<Color> staffColors = [
    Color(0xFF495057), // Dunkelgrau
    Color(0xFF868E96), // Mittelgrau
    Color(0xFFADB5BD), // Hellgrau
    Color(0xFF212529), // Anthrazit
    Color(0xFF343A40), // Dunkel
    Color(0xFF6C757D), // Grau
    Color(0xFF495057), // Schiefergrau
    Color(0xFF000000), // Schwarz
    Color(0xFF212529), // Dunkelanthrazit
    Color(0xFF343A40), // Dunkelgrau
    Color(0xFF495057), // Mittelanthrazit
    Color(0xFF6C757D), // Hellanthrazit
    Color(0xFF868E96), // Silbergrau
    Color(0xFFADB5BD), // Perlgrau
    Color(0xFFCED4DA), // Hellsilber
  ];

  static ThemeData get themeData => ThemeData(
    useMaterial3: true,
    colorScheme: ColorScheme.fromSeed(
      seedColor: primaryColor,
      brightness: Brightness.light,
    ),
    
    tabBarTheme: TabBarTheme(
      labelColor: primaryColor,
      unselectedLabelColor: Colors.grey,
      indicator: UnderlineTabIndicator(
        borderSide: BorderSide(width: 1.0, color: primaryColor),
      ),
    ),
    
    iconTheme: IconThemeData(
      color: primaryColor,
      size: 20.0,
    ),
    
    floatingActionButtonTheme: FloatingActionButtonThemeData(
      backgroundColor: primaryColor,
      foregroundColor: surfaceColor,
    ),
    
    dropdownMenuTheme: DropdownMenuThemeData(
      textStyle: TextStyle(color: primaryColor),
      menuStyle: MenuStyle(
        backgroundColor: WidgetStateProperty.all(surfaceColor),
      ),
    ),
    
    textTheme: TextTheme(
      titleLarge: TextStyle(
        fontSize: 24.0,
        fontWeight: FontWeight.w500,
        color: primaryColor,
        letterSpacing: -0.5,
      ),
      bodyLarge: TextStyle(
        fontSize: 16.0,
        color: Colors.black87,
        letterSpacing: 0.15,
      ),
      bodyMedium: TextStyle(
        fontSize: 14.0,
        color: Colors.black54,
        letterSpacing: 0.25,
      ),
    ),
  );
}

// BoxTabIndicator bleibt unverändert
class BoxTabIndicator extends Decoration {
  final Color color;
  final double height;

  const BoxTabIndicator({
    required this.color,
    this.height = 3.0,
  });

  @override
  BoxPainter createBoxPainter([VoidCallback? onChanged]) {
    return _BoxPainter(this);
  }
}

class _BoxPainter extends BoxPainter {
  final BoxTabIndicator decoration;

  _BoxPainter(this.decoration);

  @override
  void paint(Canvas canvas, Offset offset, ImageConfiguration configuration) {
    final Rect rect = offset & Size(
      configuration.size!.width,
      decoration.height,
    );
    final Paint paint = Paint()
      ..color = decoration.color
      ..style = PaintingStyle.fill;
    canvas.drawRect(rect, paint);
  }
}